pipeline {
    agent any

    stages {
        /* ---------- S1 ---------- */
        stage('Op-9304666r-S1') {
            steps {
                echo 'Op-9304666r-S1: QA web server is backup and updated'
                sh '''
                  docker start 9304666r-qa-svr || true
                  docker rmi -f qa-bkup-image 2>/dev/null || true
                  docker commit 9304666r-qa-svr qa-bkup-image

                  docker exec -u root 9304666r-qa-svr bash -c "
                    apt-get update -qq &&
                    apt-get install -y wget apache2 &&
                    wget -q https://apt.puppetlabs.com/puppet-release-bionic.deb &&
                    dpkg -i puppet-release-bionic.deb &&
                    apt-get update -qq &&
                    apt-get install -y puppet-agent
                  "

                  docker cp index-op-9304666r.html 9304666r-qa-svr:/tmp/
                  docker exec -u root 9304666r-qa-svr /opt/puppetlabs/bin/puppet apply -e \
                    'package { "apache2": ensure => installed } -> service { "apache2": ensure => running, enable => true }'
                  docker exec -u root 9304666r-qa-svr /opt/puppetlabs/bin/puppet apply -e \
                    'file { "/operate": ensure => directory } -> file { "/operate/9304666r": ensure => directory }'
                  docker exec -u root 9304666r-qa-svr /opt/puppetlabs/bin/puppet apply -e \
                    'file { "/var/www/html/index.html": source => "/tmp/index-op-9304666r.html", ensure => file }'
                '''
            }
        }

        /* ---------- S2 ---------- */
        stage('Op-9304666r-S2') {
            steps {
                sh '''
                  docker start 9304666r-qa-svr || true
                  HOST_IP=$(hostname -I | awk '{print $1}')
                  echo Using host IP: $HOST_IP
                  curl -Is http://$HOST_IP:33200 | head -n 1 > qa-result-file
                  cat qa-result-file | grep -q "HTTP/1.1 200 OK" || { echo "QA server not responding"; exit 1; }
                '''
                echo 'Op-9304666r-S2: Checking on whether QA server is running after update'
            }
        }

        /* ---------- S3 ---------- */
stage('Op-9304666r-S3') {
    steps {
        script {
            def userChoice = input(
                id: 'ProceedOrRollback',
                message: 'Choose next action:',
                parameters: [
                    choice(name: 'ACTION', choices: ['Proceed', 'Rollback'], description: 'Select action for Stage 3')
                ]
            )

            if (userChoice == 'Proceed') {
                echo "Op-9304666r-S3: Proceed to roll out to Prod server"
                sh """
                    docker stop ${PROD_NAME} || true
                    docker rm ${PROD_NAME} || true
                    docker run -d --name ${PROD_NAME} -p 33400:80 ${PROD_IMAGE}
                """
            } else {
                echo "Op-9304666r-S3: QA server fails after update and is rolled back"
                sh """
                    docker stop ${QA_NAME} || true
                    docker rm ${QA_NAME} || true
                    docker run -d --name ${QA_NAME} -p 33200:80 ${QA_BKUP_IMAGE}
                """
                error("Aborting")
            }
        }
    }
}


        /* ---------- S4 ---------- */
        stage('Op-9304666r-S4') {
            steps {
                echo 'Op-9304666r-S4: prod web server is backup and updated'
                sh '''
                  docker start 9304666r-prod-svr || true
                  docker rmi -f prod-bkup-image 2>/dev/null || true
                  docker commit 9304666r-prod-svr prod-bkup-image

                  docker exec -u root 9304666r-prod-svr bash -c "
                    apt-get update -qq &&
                    apt-get install -y wget apache2 &&
                    wget -q https://apt.puppetlabs.com/puppet-release-bionic.deb &&
                    dpkg -i puppet-release-bionic.deb &&
                    apt-get update -qq &&
                    apt-get install -y puppet-agent
                  "

                  docker cp index-op-9304666r.html 9304666r-prod-svr:/tmp/
                  docker exec -u root 9304666r-prod-svr /opt/puppetlabs/bin/puppet apply -e \
                    'package { "apache2": ensure => installed } -> service { "apache2": ensure => running, enable => true }'
                  docker exec -u root 9304666r-prod-svr /opt/puppetlabs/bin/puppet apply -e \
                    'file { "/operate": ensure => directory } -> file { "/operate/9304666r": ensure => directory }'
                  docker exec -u root 9304666r-prod-svr /opt/puppetlabs/bin/puppet apply -e \
                    'file { "/var/www/html/index.html": source => "/tmp/index-op-9304666r.html", ensure => file }'
                '''
            }
        }

        /* ---------- S5 ---------- */
stage('Op-9304666r-S5') {
    steps {
        script {
            sh """
                echo "Op-9304666r-S5: Starting/Verifying Prod container"

                # If Prod container exists, stop and remove it
                if docker ps -a --format '{{.Names}}' | grep -qx ${PROD_NAME}; then
                    echo "Stopping existing Prod container..."
                    docker stop ${PROD_NAME} || true
                    docker rm ${PROD_NAME} || true
                fi

                # Start Prod container from backup image
                echo "Starting Prod container on port 33500..."
                docker run -d --name ${PROD_NAME} -p 33500:80 ${PROD_BKUP_IMAGE}

                # Wait for Prod to respond on HTTP
                echo "Waiting for Prod to respond on HTTP..."
                SUCCESS=0
                for i in {1..10}; do
                    if curl -s -o /dev/null -w "%{http_code}" http://localhost:33500 | grep -q 200; then
                        echo "Prod container is up and serving HTTP"
                        SUCCESS=1
                        break
                    fi
                    echo "Prod not ready yet, retrying in 2s..."
                    sleep 2
                done

                if [ \$SUCCESS -ne 1 ]; then
                    echo "ERROR: Prod container failed to start properly on port 33500"
                    exit 99
                fi
            """

            // Abort Jenkins pipeline if Prod didnâ€™t start
            if (sh(returnStatus: true, script: "test -f /tmp/force_abort && exit 99") == 99) {
                error("Aborting")
            }

            // Only run bolt script if Prod is ready
            sh """
                dos2unix 9304666r_script
                chmod +x 9304666r_script
                bolt script run 9304666r_script --targets docker://${PROD_NAME}
            """
        }
    }
}


        /* ---------- S6 ---------- */
        stage('Op-9304666r-S6') {
            steps {
                script {
                    def proceed = input(
                        id: 'prodProceed',
                        message: 'Prod server returned 200 OK. Release to production?',
                        ok: 'Proceed',
                        parameters: [
                            choice(name: 'CHOICE',
                                   choices: ['Proceed', 'Rollback'],
                                   description: 'Choose action for Prod server')
                        ]
                    )
                    if (proceed == 'Proceed') {
                        echo 'Op-9304666r-S6: Proceed to release Prod web server to production'
                    } else {
                        echo 'Op-9304666r-S6: Prod web server is rolled back'
                        sh '''
                          docker stop 9304666r-prod-svr || true
                          docker rm -f 9304666r-prod-svr || true
                          docker run -d --name 9304666r-prod-svr \
                            --hostname 9304666r-prod-svr.localdomain \
                            --network qa-net \
                            --ip 192.168.100.220 \
                            -p 33500:80 \
                            prod-bkup-image \
                            bash -c "apache2ctl -D FOREGROUND"

                          timeout 90 bash -c '
                            until curl -Is http://localhost:33500 | grep -q "HTTP/1.1 200 OK"; do
                              echo "$(date) Waiting for Prod rollback server..."
                              sleep 3
                            done
                          '
                        '''
                        error('Aborting pipeline')
                    }
                }
            }
        }

        /* ---------- S7 ---------- */
        stage('Op-9304666r-S7') {
            steps {
                echo 'Op-9304666r-S7: Prod web server is monitored and ready to serve.'
            }
        }
    }

    post {
        always {
            echo '9304666r-operate-pipeline finished'
        }
    }
}










